#!/bin/bash

# üß™ Script de Validaci√≥n - D√≠a 14: Testing y Quality Assurance
# Valida que todos los archivos y ejercicios est√©n completos

echo "üß™ Validando D√≠a 14: Testing y Quality Assurance..."
echo "=================================================="

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Contadores
TOTAL_CHECKS=0
PASSED_CHECKS=0
FAILED_CHECKS=0

# Funci√≥n para verificar archivo
check_file() {
    local file="$1"
    local description="$2"
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úì${NC} $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        return 0
    else
        echo -e "${RED}‚úó${NC} $description"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
        return 1
    fi
}

# Funci√≥n para verificar directorio
check_directory() {
    local dir="$1"
    local description="$2"
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -d "$dir" ]; then
        echo -e "${GREEN}‚úì${NC} $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        return 0
    else
        echo -e "${RED}‚úó${NC} $description"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
        return 1
    fi
}

# Funci√≥n para verificar contenido de archivo
check_content() {
    local file="$1"
    local pattern="$2"
    local description="$3"
    TOTAL_CHECKS=$((TOTAL_CHECKS + 1))
    
    if [ -f "$file" ] && grep -q "$pattern" "$file"; then
        echo -e "${GREEN}‚úì${NC} $description"
        PASSED_CHECKS=$((PASSED_CHECKS + 1))
        return 0
    else
        echo -e "${RED}‚úó${NC} $description"
        FAILED_CHECKS=$((FAILED_CHECKS + 1))
        return 1
    fi
}

echo -e "${YELLOW}üìÅ Verificando estructura de directorios...${NC}"
echo ""

# Verificar directorios principales
check_directory "dia14" "Directorio principal dia14"
check_directory "dia14/ejercicios" "Directorio de ejercicios"
check_directory "dia14/proyectos" "Directorio de proyectos"
check_directory "dia14/recursos" "Directorio de recursos"

echo ""
echo -e "${YELLOW}üìã Verificando archivos principales...${NC}"
echo ""

# Verificar archivos principales
check_file "dia14/README.md" "Archivo README principal"
check_file "dia14/CHECKLIST_DIA14.md" "Checklist de evaluaci√≥n"
check_file "dia14/DIA14_DETALLADO.md" "Gu√≠a detallada del d√≠a"

echo ""
echo -e "${YELLOW}üß™ Verificando ejercicios...${NC}"
echo ""

# Verificar ejercicios
check_file "dia14/ejercicios/01_configuracion_testing.md" "Ejercicio 1: Configuraci√≥n Testing"
check_file "dia14/ejercicios/02_unit_testing_jest.md" "Ejercicio 2: Unit Testing Jest"
check_file "dia14/ejercicios/03_react_component_testing.md" "Ejercicio 3: React Component Testing"
check_file "dia14/ejercicios/04_api_integration_testing.md" "Ejercicio 4: API Integration Testing"
check_file "dia14/ejercicios/05_code_quality_linting.md" "Ejercicio 5: Code Quality Linting"
check_file "dia14/ejercicios/06_performance_testing.md" "Ejercicio 6: Performance Testing"
check_file "dia14/ejercicios/07_accessibility_testing.md" "Ejercicio 7: Accessibility Testing"

echo ""
echo -e "${YELLOW}üìù Verificando proyectos...${NC}"
echo ""

# Verificar proyectos
check_file "dia14/proyectos/README.md" "Proyecto integrador principal"
check_file "dia14/proyectos/configuracion-testing.md" "Configuraci√≥n de testing"

echo ""
echo -e "${YELLOW}üìö Verificando recursos...${NC}"
echo ""

# Verificar recursos
check_file "dia14/recursos/README.md" "Recursos principales"
check_file "dia14/recursos/evaluacion.md" "Gu√≠a de evaluaci√≥n"

echo ""
echo -e "${YELLOW}üîç Verificando contenido espec√≠fico...${NC}"
echo ""

# Verificar contenido espec√≠fico en archivos
check_content "dia14/README.md" "Testing y Quality Assurance" "T√≠tulo correcto en README"
check_content "dia14/README.md" "Jest" "Menciona Jest en README"
check_content "dia14/README.md" "React Testing Library" "Menciona RTL en README"
check_content "dia14/README.md" "Playwright" "Menciona Playwright en README"
check_content "dia14/README.md" "ESLint" "Menciona ESLint en README"
check_content "dia14/README.md" "Lighthouse" "Menciona Lighthouse en README"

check_content "dia14/CHECKLIST_DIA14.md" "Testing Unitario" "Checklist incluye Testing Unitario"
check_content "dia14/CHECKLIST_DIA14.md" "Integration Testing" "Checklist incluye Integration Testing"
check_content "dia14/CHECKLIST_DIA14.md" "Component Testing" "Checklist incluye Component Testing"
check_content "dia14/CHECKLIST_DIA14.md" "Performance Testing" "Checklist incluye Performance Testing"
check_content "dia14/CHECKLIST_DIA14.md" "Accessibility Testing" "Checklist incluye Accessibility Testing"

# Verificar ejercicios tienen contenido apropiado
check_content "dia14/ejercicios/01_configuracion_testing.md" "jest.config.js" "Ejercicio 1 incluye configuraci√≥n Jest"
check_content "dia14/ejercicios/02_unit_testing_jest.md" "describe" "Ejercicio 2 incluye sintaxis Jest"
check_content "dia14/ejercicios/03_react_component_testing.md" "render" "Ejercicio 3 incluye RTL"
check_content "dia14/ejercicios/04_api_integration_testing.md" "supertest" "Ejercicio 4 incluye Supertest"
check_content "dia14/ejercicios/05_code_quality_linting.md" "eslint" "Ejercicio 5 incluye ESLint"
check_content "dia14/ejercicios/06_performance_testing.md" "lighthouse" "Ejercicio 6 incluye Lighthouse"
check_content "dia14/ejercicios/07_accessibility_testing.md" "axe-core" "Ejercicio 7 incluye axe-core"

echo ""
echo -e "${YELLOW}üìä Verificando estructura de evaluaci√≥n...${NC}"
echo ""

# Verificar estructura de evaluaci√≥n
check_content "dia14/recursos/evaluacion.md" "Unit Testing.*25 puntos" "Evaluaci√≥n incluye Unit Testing (25 puntos)"
check_content "dia14/recursos/evaluacion.md" "Integration Testing.*25 puntos" "Evaluaci√≥n incluye Integration Testing (25 puntos)"
check_content "dia14/recursos/evaluacion.md" "Component Testing.*20 puntos" "Evaluaci√≥n incluye Component Testing (20 puntos)"
check_content "dia14/recursos/evaluacion.md" "E2E Testing.*15 puntos" "Evaluaci√≥n incluye E2E Testing (15 puntos)"
check_content "dia14/recursos/evaluacion.md" "Quality Assurance.*15 puntos" "Evaluaci√≥n incluye Quality Assurance (15 puntos)"

echo ""
echo -e "${YELLOW}üéØ Verificando proyecto integrador...${NC}"
echo ""

# Verificar proyecto integrador
check_content "dia14/proyectos/README.md" "suite completa de testing" "Proyecto incluye suite completa"
check_content "dia14/proyectos/README.md" "e-commerce" "Proyecto es sobre e-commerce"
check_content "dia14/proyectos/README.md" "85% m√≠nimo" "Proyecto requiere 85% coverage"
check_content "dia14/proyectos/README.md" "WCAG" "Proyecto incluye WCAG compliance"

# Verificar configuraci√≥n de testing
check_content "dia14/proyectos/configuracion-testing.md" "jest.config.js" "Configuraci√≥n incluye Jest"
check_content "dia14/proyectos/configuracion-testing.md" "eslintrc" "Configuraci√≥n incluye ESLint"
check_content "dia14/proyectos/configuracion-testing.md" "prettier" "Configuraci√≥n incluye Prettier"
check_content "dia14/proyectos/configuracion-testing.md" "playwright.config.js" "Configuraci√≥n incluye Playwright"

echo ""
echo -e "${YELLOW}üìö Verificando recursos completos...${NC}"
echo ""

# Verificar recursos
check_content "dia14/recursos/README.md" "Jest.*https://jestjs.io" "Recursos incluyen documentaci√≥n Jest"
check_content "dia14/recursos/README.md" "React Testing Library.*https://testing-library.com" "Recursos incluyen RTL"
check_content "dia14/recursos/README.md" "Playwright.*https://playwright.dev" "Recursos incluyen Playwright"
check_content "dia14/recursos/README.md" "ESLint.*https://eslint.org" "Recursos incluyen ESLint"
check_content "dia14/recursos/README.md" "Lighthouse.*https://developers.google.com" "Recursos incluyen Lighthouse"
check_content "dia14/recursos/README.md" "axe-core.*https://github.com/dequelabs/axe-core" "Recursos incluyen axe-core"

echo ""
echo "=================================================="
echo -e "${YELLOW}üìä RESUMEN DE VALIDACI√ìN${NC}"
echo "=================================================="
echo -e "Total de verificaciones: ${YELLOW}$TOTAL_CHECKS${NC}"
echo -e "Verificaciones exitosas: ${GREEN}$PASSED_CHECKS${NC}"
echo -e "Verificaciones fallidas: ${RED}$FAILED_CHECKS${NC}"

# Calcular porcentaje
if [ $TOTAL_CHECKS -gt 0 ]; then
    PERCENTAGE=$(( (PASSED_CHECKS * 100) / TOTAL_CHECKS ))
    echo -e "Porcentaje de completitud: ${YELLOW}$PERCENTAGE%${NC}"
else
    PERCENTAGE=0
fi

echo ""

# Resultado final
if [ $FAILED_CHECKS -eq 0 ]; then
    echo -e "${GREEN}üéâ ¬°VALIDACI√ìN EXITOSA!${NC}"
    echo -e "${GREEN}‚úÖ D√≠a 14 est√° completo y listo para uso${NC}"
    echo ""
    echo -e "${YELLOW}üìã Componentes validados:${NC}"
    echo "‚Ä¢ ‚úÖ Estructura de directorios completa"
    echo "‚Ä¢ ‚úÖ Archivos principales (README, CHECKLIST, DETALLADO)"
    echo "‚Ä¢ ‚úÖ 7 ejercicios de testing implementados"
    echo "‚Ä¢ ‚úÖ Proyecto integrador completo"
    echo "‚Ä¢ ‚úÖ Recursos y documentaci√≥n completos"
    echo "‚Ä¢ ‚úÖ Gu√≠a de evaluaci√≥n detallada"
    echo "‚Ä¢ ‚úÖ Configuraciones de testing incluidas"
    echo ""
    echo -e "${GREEN}üéØ El D√≠a 14 est√° preparado para:${NC}"
    echo "‚Ä¢ Testing unitario con Jest"
    echo "‚Ä¢ Testing de componentes con RTL"
    echo "‚Ä¢ Integration testing con Supertest"
    echo "‚Ä¢ E2E testing con Playwright"
    echo "‚Ä¢ Quality assurance con ESLint/Prettier"
    echo "‚Ä¢ Performance testing con Lighthouse"
    echo "‚Ä¢ Accessibility testing con axe-core"
    echo "‚Ä¢ CI/CD pipeline b√°sico"
    echo ""
    exit 0
else
    echo -e "${RED}‚ùå VALIDACI√ìN FALLIDA${NC}"
    echo -e "${RED}Se encontraron $FAILED_CHECKS errores que deben corregirse${NC}"
    echo ""
    echo -e "${YELLOW}üîß Elementos faltantes o con errores:${NC}"
    
    # Mostrar qu√© falta
    if [ ! -d "dia14" ]; then
        echo "‚Ä¢ ‚ùå Falta directorio principal dia14"
    fi
    
    if [ ! -f "dia14/README.md" ]; then
        echo "‚Ä¢ ‚ùå Falta README.md principal"
    fi
    
    if [ ! -f "dia14/CHECKLIST_DIA14.md" ]; then
        echo "‚Ä¢ ‚ùå Falta checklist de evaluaci√≥n"
    fi
    
    if [ ! -f "dia14/DIA14_DETALLADO.md" ]; then
        echo "‚Ä¢ ‚ùå Falta gu√≠a detallada"
    fi
    
    # Verificar ejercicios faltantes
    EJERCICIOS_FALTANTES=0
    for i in {1..7}; do
        EJERCICIO_NUM=$(printf "%02d" $i)
        if [ ! -f "dia14/ejercicios/${EJERCICIO_NUM}_"*.md ]; then
            EJERCICIOS_FALTANTES=$((EJERCICIOS_FALTANTES + 1))
        fi
    done
    
    if [ $EJERCICIOS_FALTANTES -gt 0 ]; then
        echo "‚Ä¢ ‚ùå Faltan $EJERCICIOS_FALTANTES ejercicios"
    fi
    
    if [ ! -f "dia14/proyectos/README.md" ]; then
        echo "‚Ä¢ ‚ùå Falta proyecto integrador"
    fi
    
    if [ ! -f "dia14/recursos/README.md" ]; then
        echo "‚Ä¢ ‚ùå Faltan recursos"
    fi
    
    if [ ! -f "dia14/recursos/evaluacion.md" ]; then
        echo "‚Ä¢ ‚ùå Falta gu√≠a de evaluaci√≥n"
    fi
    
    echo ""
    echo -e "${YELLOW}üí° Recomendaciones:${NC}"
    echo "1. Verifica que todos los archivos est√©n creados"
    echo "2. Revisa que el contenido sea apropiado para testing"
    echo "3. Aseg√∫rate de que los ejercicios sean progresivos"
    echo "4. Confirma que los recursos incluyan documentaci√≥n"
    echo "5. Valida que la evaluaci√≥n sea comprehensiva"
    echo ""
    exit 1
fi
