/**
 * üéØ Ejercicio 1: Scope y Hoisting
 *
 * Objetivo: Dominar el concepto de scope (√°mbito) y hoisting en JavaScript
 * Tiempo estimado: 45 minutos
 * Dificultad: ‚≠ê‚≠ê‚≠ê
 */

console.log('=== EJERCICIO 1: SCOPE Y HOISTING ===');

// =============================================================================
// PARTE 1: SCOPE (√ÅMBITO DE VARIABLES)
// =============================================================================

console.log('\n--- PARTE 1: SCOPE ---');

/**
 * 1.1 Scope Global vs Local
 *
 * Analiza y predice qu√© imprimir√° el siguiente c√≥digo.
 * Ejecuta y verifica tu predicci√≥n.
 */

// Ejercicio 1.1a: Scope b√°sico
console.log('\n1.1a - Scope b√°sico:');
// Tu predicci√≥n: ¬øQu√© imprimir√°?

var global = 'Soy global';

function testScope() {
  var local = 'Soy local';
  console.log('Dentro de funci√≥n - global:', global);
  console.log('Dentro de funci√≥n - local:', local);
}

testScope();
console.log('Fuera de funci√≥n - global:', global);
// console.log("Fuera de funci√≥n - local:", local); // ¬øQu√© pasar√°?

/**
 * 1.2 Function Scope vs Block Scope
 *
 * Completa los espacios en blanco para que el c√≥digo funcione correctamente.
 */

console.log('\n1.2 - Function vs Block Scope:');

function scopeExample() {
  // Completa con var, let o const seg√∫n sea apropiado
  /* _____ */ functionScoped = 'Disponible en toda la funci√≥n';

  if (true) {
    /* _____ */ blockScoped = 'Solo disponible en este bloque';
    /* _____ */ alsoBlockScoped = 'Tambi√©n solo en este bloque';

    console.log('Dentro del bloque:', blockScoped);
    console.log('Dentro del bloque:', functionScoped);
  }

  console.log('Fuera del bloque:', functionScoped);
  // console.log("Fuera del bloque:", blockScoped); // ¬øFuncionar√°?
}

scopeExample();

/**
 * 1.3 Variable Shadowing
 *
 * Explica qu√© es el shadowing y resuelve el siguiente problema.
 */

console.log('\n1.3 - Variable Shadowing:');

let nombre = 'Juan';

function saludar() {
  let nombre = 'Mar√≠a'; // ¬øQu√© hace esto?
  console.log('Hola ' + nombre);
}

saludar();
console.log('Nombre global:', nombre);

// TODO: Modifica la funci√≥n para que use ambos nombres
function saludarAmbos() {
  let nombreLocal = 'Mar√≠a';
  // Tu c√≥digo aqu√≠: imprimir tanto el nombre global como el local
}

saludarAmbos();

/**
 * 1.4 Lexical Scoping
 *
 * Completa la funci√≥n para demostrar lexical scoping.
 */

console.log('\n1.4 - Lexical Scoping:');

function exterior() {
  let variableExterior = 'Desde funci√≥n exterior';

  function interior() {
    // TODO: Accede a variableExterior desde aqu√≠
    console.log('Funci√≥n interior accede:' /* tu c√≥digo aqu√≠ */);
  }

  interior();
}

exterior();

// =============================================================================
// PARTE 2: HOISTING
// =============================================================================

console.log('\n--- PARTE 2: HOISTING ---');

/**
 * 2.1 Hoisting de Variables (var)
 *
 * Predice qu√© imprimir√° cada console.log ANTES de ejecutar.
 */

console.log('\n2.1 - Hoisting de var:');

// Predicci√≥n: ¬øQu√© imprimir√°?
console.log('valor antes de declarar:', valor);

var valor = 'Hola mundo';

console.log('valor despu√©s de declarar:', valor);

/**
 * 2.2 Hoisting de let y const (Temporal Dead Zone)
 *
 * Explica por qu√© algunos de estos funcionan y otros no.
 */

console.log('\n2.2 - Temporal Dead Zone:');

// TODO: Comenta las l√≠neas que causen error y explica por qu√©

// console.log("miLet antes de declarar:", miLet);
// console.log("miConst antes de declarar:", miConst);

let miLet = 'Declarada con let';
const miConst = 'Declarada con const';

console.log('miLet despu√©s de declarar:', miLet);
console.log('miConst despu√©s de declarar:', miConst);

/**
 * 2.3 Hoisting de Funciones
 *
 * Compara el hoisting de function declarations vs function expressions.
 */

console.log('\n2.3 - Hoisting de Funciones:');

// TODO: Predice qu√© funcionar√° y qu√© no

// ¬øFuncionar√°?
// funcionDeclarada();

// ¬øFuncionar√°?
// funcionExpresion();

// ¬øFuncionar√°?
// funcionFlecha();

function funcionDeclarada() {
  console.log('Soy una funci√≥n declarada');
}

var funcionExpresion = function () {
  console.log('Soy una funci√≥n expresi√≥n');
};

var funcionFlecha = () => {
  console.log('Soy una funci√≥n flecha');
};

// Ahora las llamamos
funcionDeclarada();
funcionExpresion();
funcionFlecha();

/**
 * 2.4 Hoisting Complejo
 *
 * Analiza este c√≥digo complejo y predice su salida.
 */

console.log('\n2.4 - Hoisting Complejo:');

var x = 1;

function hoistingComplejo() {
  console.log('x al inicio de funci√≥n:', x);

  if (true) {
    var x = 2; // ¬øQu√© efecto tiene esto?
    console.log('x dentro del if:', x);
  }

  console.log('x al final de funci√≥n:', x);
}

hoistingComplejo();
console.log('x global:', x);

// =============================================================================
// PARTE 3: EJERCICIOS PR√ÅCTICOS
// =============================================================================

console.log('\n--- PARTE 3: EJERCICIOS PR√ÅCTICOS ---');

/**
 * 3.1 Contador con Closure
 *
 * Crea un contador que use scope correctamente.
 */

console.log('\n3.1 - Contador con Closure:');

function crearContador() {
  // TODO: Crea una variable contador local

  return function () {
    // TODO: Incrementa y retorna el contador
  };
}

const contador1 = crearContador();
const contador2 = crearContador();

// TODO: Testa los contadores
console.log('Contador 1:', contador1()); // Deber√≠a imprimir 1
console.log('Contador 1:', contador1()); // Deber√≠a imprimir 2
console.log('Contador 2:', contador2()); // Deber√≠a imprimir 1

/**
 * 3.2 Sistema de Configuraci√≥n
 *
 * Crea un sistema que evite contaminar el scope global.
 */

console.log('\n3.2 - Sistema de Configuraci√≥n:');

// TODO: Crea una funci√≥n autoinvocada que evite variables globales
(function () {
  // Tu c√≥digo aqu√≠
  let configuracion = {
    tema: 'oscuro',
    idioma: 'espa√±ol',
  };

  // TODO: Crea funciones para obtener y establecer configuraci√≥n
  window.getConfig = function (clave) {
    // Tu c√≥digo aqu√≠
  };

  window.setConfig = function (clave, valor) {
    // Tu c√≥digo aqu√≠
  };
})();

// Testa el sistema
setConfig('tema', 'claro');
console.log('Tema actual:', getConfig('tema'));

/**
 * 3.3 Depuraci√≥n de Scope
 *
 * Encuentra y corrige los errores en este c√≥digo.
 */

console.log('\n3.3 - Depuraci√≥n de Scope:');

// TODO: Encuentra y corrige los errores de scope
function procesarUsuarios() {
  const usuarios = ['Ana', 'Carlos', 'Mar√≠a'];

  for (let i = 0; i < usuarios.length; i++) {
    // Error: usando var en lugar de let
    var procesarUsuario = function (usuario) {
      setTimeout(() => {
        console.log(`Procesando usuario: ${usuario}`);
      }, 100);
    };

    procesarUsuario(usuarios[i]);
  }
}

procesarUsuarios();

/**
 * 3.4 Optimizaci√≥n de Scope
 *
 * Optimiza este c√≥digo para mejor rendimiento y mantenibilidad.
 */

console.log('\n3.4 - Optimizaci√≥n de Scope:');

// TODO: Optimiza este c√≥digo
function calcularEstadisticas() {
  var numeros = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var suma = 0;
  var promedio = 0;
  var maximo = 0;
  var minimo = 0;

  // Calcular suma
  for (var i = 0; i < numeros.length; i++) {
    suma += numeros[i];
  }

  // Calcular promedio
  promedio = suma / numeros.length;

  // Encontrar m√°ximo
  for (var i = 0; i < numeros.length; i++) {
    if (numeros[i] > maximo) {
      maximo = numeros[i];
    }
  }

  // Encontrar m√≠nimo
  minimo = numeros[0];
  for (var i = 1; i < numeros.length; i++) {
    if (numeros[i] < minimo) {
      minimo = numeros[i];
    }
  }

  return {
    suma: suma,
    promedio: promedio,
    maximo: maximo,
    minimo: minimo,
  };
}

const estadisticas = calcularEstadisticas();
console.log('Estad√≠sticas:', estadisticas);

// =============================================================================
// PARTE 4: PREGUNTAS DE REFLEXI√ìN
// =============================================================================

console.log('\n--- PARTE 4: PREGUNTAS DE REFLEXI√ìN ---');

/**
 * Responde estas preguntas con comentarios:
 *
 * 1. ¬øCu√°l es la diferencia entre var, let y const en t√©rminos de scope?
 * // Tu respuesta aqu√≠
 *
 * 2. ¬øQu√© es el hoisting y c√≥mo afecta el comportamiento del c√≥digo?
 * // Tu respuesta aqu√≠
 *
 * 3. ¬øCu√°ndo es √∫til el hoisting y cu√°ndo puede causar problemas?
 * // Tu respuesta aqu√≠
 *
 * 4. ¬øC√≥mo evitar problemas comunes relacionados con scope?
 * // Tu respuesta aqu√≠
 *
 * 5. ¬øQu√© es el Temporal Dead Zone y c√≥mo afecta a let y const?
 * // Tu respuesta aqu√≠
 */

// =============================================================================
// PARTE 5: DESAF√çOS ADICIONALES
// =============================================================================

console.log('\n--- PARTE 5: DESAF√çOS ADICIONALES ---');

/**
 * 5.1 Desaf√≠o: Scope Chain
 *
 * Crea una funci√≥n que demuestre c√≥mo funciona la cadena de scope.
 */

console.log('\n5.1 - Desaf√≠o Scope Chain:');

// TODO: Crea una funci√≥n que demuestre scope chain con m√∫ltiples niveles
function nivelUno() {
  const variable1 = 'Nivel 1';

  function nivelDos() {
    const variable2 = 'Nivel 2';

    function nivelTres() {
      const variable3 = 'Nivel 3';

      // TODO: Accede a las tres variables aqu√≠
      console.log('Acceso desde nivel 3:' /* tu c√≥digo aqu√≠ */);
    }

    nivelTres();
  }

  nivelDos();
}

nivelUno();

/**
 * 5.2 Desaf√≠o: Hoisting Quiz
 *
 * Sin ejecutar, predice qu√© imprimir√° este c√≥digo.
 */

console.log('\n5.2 - Desaf√≠o Hoisting Quiz:');

// TODO: Predice la salida antes de ejecutar
function hoistingQuiz() {
  console.log('1:', typeof foo);
  console.log('2:', typeof bar);

  var foo = 'Hola';
  let bar = 'Mundo';

  console.log('3:', foo);
  console.log('4:', bar);
}

hoistingQuiz();

/**
 * 5.3 Desaf√≠o: M√≥dulo Privado
 *
 * Crea un m√≥dulo que tenga variables privadas y m√©todos p√∫blicos.
 */

console.log('\n5.3 - Desaf√≠o M√≥dulo Privado:');

// TODO: Crea un m√≥dulo con variables privadas
const calculadora = (function () {
  // Variables privadas
  let historial = [];

  // M√©todos p√∫blicos
  return {
    sumar: function (a, b) {
      // TODO: Implementa suma y guarda en historial
    },

    restar: function (a, b) {
      // TODO: Implementa resta y guarda en historial
    },

    obtenerHistorial: function () {
      // TODO: Retorna copia del historial
    },
  };
})();

// Testa el m√≥dulo
console.log('Suma:', calculadora.sumar(5, 3));
console.log('Resta:', calculadora.restar(10, 4));
console.log('Historial:', calculadora.obtenerHistorial());

// =============================================================================
// RESPUESTAS Y SOLUCIONES
// =============================================================================

/**
 * Una vez que completes todos los ejercicios, compara tus respuestas con las
 * soluciones en el archivo de respuestas del instructor.
 *
 * Puntos clave a recordar:
 * - var tiene function scope, let y const tienen block scope
 * - Hoisting mueve declaraciones al inicio de su scope
 * - Temporal Dead Zone previene acceso a let/const antes de su declaraci√≥n
 * - Scope chain permite acceso a variables de scopes superiores
 * - Usar const por defecto, let cuando necesites reasignar, evitar var
 */

console.log('\n=== FIN DEL EJERCICIO 1 ===');
